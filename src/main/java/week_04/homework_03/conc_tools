SynchronizedSet/SynchronizedMap/SynchronizedList

Collections里的实现,几乎所有方法都是同步的,连hashcode,size,siEmpty都是同步的.

优点:简单,所有方法同步不需要考虑不安全的场景.判断大小都是安全的

缺点:锁的颗粒度比较大.所有方法都上锁,可能太绝对了

使用场景:并发度不是很高的场景

Hashtable

put,putAll,get等方法都加了Synchronized关键字.

优点:线程安全

缺点:颗粒度太大.size等方法依然不是同步的

使用场景:不推荐使用,建议换ConcurrentHashMap

ConcurrentHashMap

jdk1.8之后，ConcurrentHashMap中的segment已经基本上废弃，原有的结构是三层：Segment—>Array—>链表,采用CAS+Synchronized来替代。因为其中并发级别控制了Segment的个数，在一个ConcurrentHashMap创建后Segment的个数是不能变的，扩容过程过改变的是每个Segment的大小。map越大,锁的颗粒度就越大,同时会将链表转成红黑树,也提供了许多MapReduce方法

优点:同步并且颗粒度小
缺点:多线程出现同时读写一个对象时会不一致.插入是cas,读取时可能是空.
使用场景:对容量的size,读取等敏感的场景不适合

ConcurrentLinkedQueue

无锁实现,通过cas操作修改节点的next,head,tail.无锁队列.

优点:无锁,避免了sync锁产生的内核的开销

缺点:cas无法保证代码块的安全性,cas消耗cpu

CopyOnWriteArrayList

读操作无锁的ArrayList。所有可变操作都是通过对底层数组进行一次新的复制来实现。

优点:区别了读和写操作,写操作生成新的副本

缺点:消耗内存.多写情况下会一直copy,而大数组是直接在老年代的,容易产生full gc

适用场景:适合使用在读操作远远大于写操作的场景里并且容量大小固定或者能够正确预估的场景